#+TITLE: Emacs Configuration
#+AUTHOR: Adam
#+STARTUP: overview

* Essential Functions
** Reload Configuration
#+begin_src emacs-lisp
(defun my/reload-config ()
  "Reload configuration, handling org-babel if needed."
  (interactive)
  (let ((config-file user-init-file))
    (condition-case err
        (cond
         ;; If using org-babel config
         ((string-suffix-p ".org" config-file)
          (org-babel-load-file config-file)
          (message "Org configuration reloaded!"))
         ;; Regular .el file
         (t
          (load-file config-file)
          (message "Configuration reloaded!")))
      (error
       (message "Error reloading config: %s" (error-message-string err))))))

(global-set-key (kbd "C-c r") 'my/reload-config)
#+end_src

** Add to PATH
#+begin_src emacs-lisp
  ;; Function to add paths to exec-path and PATH
  (defun my/add-to-path (path)
    (let ((expanded-path (expand-file-name path)))
      (when (file-directory-p expanded-path)
        (add-to-list 'exec-path expanded-path)
        (setenv "PATH" (concat (getenv "PATH") ":" expanded-path)))))

  ;; Add paths
  (my/add-to-path "~/.local/bin")
  (my/add-to-path "~/.npm-global/bin")
#+end_src

* Package Management

** Initialize Package System
#+begin_src emacs-lisp
;; Initialize package system
(require 'package)

;; Add MELPA repository
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("elpa" . "https://elpa.gnu.org/packages/")
        ("nongnu" . "https://elpa.nongnu.org/nongnu/")))

;; Initialize package system
(package-initialize)

;; Refresh package contents if needed
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Use-package Setup
#+begin_src emacs-lisp
;; Install use-package if not already installed
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Configure use-package
(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* User Interface

** Basic UI Improvements
#+begin_src emacs-lisp
(use-package emacs
  :ensure nil
  :config
  ;; Disable startup screen
  (setq inhibit-startup-screen t)
  
  ;; Show line numbers
  (global-display-line-numbers-mode 1)
  
  ;; Highlight current line
  (global-hl-line-mode 1)
  
  ;; Show matching parentheses
  (show-paren-mode 1)
  
  ;; Enable column number mode
  (column-number-mode 1)
  
  ;; Disable toolbar, menubar, and scrollbar
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  
  ;; Better scrolling
  (setq scroll-conservatively 100)
  
  ;; Auto-save and backup settings
  (setq make-backup-files nil)
  (setq auto-save-default nil))
#+end_src

** Theme
#+begin_src emacs-lisp
  (unless (package-installed-p 'autothemer)
    (package-refresh-contents)
    (package-install 'autothemer))
  
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")
  (load-theme 'rose-pine t)
#+end_src
** VTerm
#+begin_src emacs-lisp
;; Install vterm if not already installed
(unless (package-installed-p 'vterm)
  (package-refresh-contents)
  (package-install 'vterm))

;; Basic vterm configuration
(use-package vterm
  :ensure t
  :bind ("C-c t" . vterm))
 #+end_src
  
* Navigation & Completion

** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :config
  (which-key-mode 1))
#+end_src

** Ivy Completion Framework
#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t))

(use-package counsel
  :after ivy
  :config
  (counsel-mode 1))

(use-package swiper
  :after ivy
  :bind ("C-s" . swiper))
#+end_src

** Auto-completion
#+begin_src emacs-lisp
(use-package company
  :config
  (global-company-mode 1)
  (setq company-idle-delay 0.3)
  (setq company-minimum-prefix-length 2))
#+end_src

* Language Server Protocol (LSP)

** LSP Mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (python-mode . lsp-deferred)
  (go-mode . lsp-deferred)
  (js-mode . lsp-deferred)
  (typescript-mode . lsp-deferred)
  (web-mode . lsp-deferred)
  (css-mode . lsp-deferred)
  (html-mode . lsp-deferred)
  (yaml-mode . lsp-deferred)
  (ansible-mode . lsp-deferred)
  (emacs-lisp-mode . lsp-deferred)
  (lsp-mode . lsp-enable-which-key-integration)
  :commands (lsp lsp-deferred)
  :config
  (setq lsp-prefer-flymake nil)
  (setq lsp-enable-snippet t)
  (setq lsp-enable-completion-at-point t))

(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable t)
  (setq lsp-ui-doc-position 'bottom)
  (setq lsp-ui-sideline-enable t)
  (setq lsp-ui-flycheck-enable t))

(use-package lsp-ivy
  :commands lsp-ivy-workspace-symbol)
#+end_src
* Programming Languages

** Python
#+begin_src emacs-lisp
(use-package python-mode
  :mode "\\.py\\'"
  :hook (python-mode . lsp-deferred))
#+end_src

** Go
#+begin_src emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :hook (go-mode . lsp-deferred)
  :config
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

** JavaScript/TypeScript
#+begin_src emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :hook (js2-mode . lsp-deferred))

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred))
#+end_src

** Web Development
#+begin_src emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'" "\\.css\\'" "\\.tsx\\'")
  :hook (web-mode . lsp-deferred)
  :config
  (setq web-mode-content-types-alist
        '(("jsx" . "\\.tsx\\'")
          ("javascript" . "\\.js\\'"))))

(use-package css-mode
  :mode "\\.css\\'"
  :hook (css-mode . lsp-deferred))
#+end_src

** YAML and Ansible
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'"
  :hook (yaml-mode . lsp-deferred))

(use-package ansible
  :hook (yaml-mode . ansible-mode)
  :config
  (add-hook 'ansible-mode-hook 'lsp-deferred))
#+end_src

** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode ("\\.md\\'" "\\.markdown\\'")
  :config
  (setq markdown-command "pandoc"))
#+end_src

** Org Mode
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :config
  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-with-inline-images t))
#+end_src

** Emacs Lisp
#+begin_src emacs-lisp
(use-package elisp-mode
  :ensure nil
  :hook (emacs-lisp-mode . lsp-deferred))
#+end_src

* Snippets

** YASnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets")))

(use-package yasnippet-snippets
  :after yasnippet)

* AI coding
** Claude Code

#+begin_src emacs-lisp
  (use-package claude-code-ide
    :vc (:url "https://github.com/manzaltu/claude-code-ide.el" :rev :newest)
    :bind ("C-c C-'" . claude-code-ide-menu) ; Set your favorite keybinding
    :config
    (claude-code-ide-emacs-tools-setup)) ; Optionally enable Emacs MCP tools

  ;; Test Claude Installation
  (message "Claude found at: %s" (executable-find "claude"))
#+end_src
