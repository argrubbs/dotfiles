#+TITLE: ARG Emacs
#+AUTHOR: Adam Grubbs
:PROPERTIES:
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: overview
:END:
* Configuration
  :PROPERTIES:
  :VISIBILITY: children
  :END:
** straight.el
   #+begin_src emacs-lisp
   ;; Configure straight.el to use use-package by default
   (setq straight-use-package-by-default t)
   (straight-use-package 'use-package)
   #+end_src
** My Info 
   #+begin_src emacs-lisp
   (setq user-full-name "Adam Grubbs"
         user-main-address "argrubbs@users.noreply.github.com")
   #+end_src


** Custom Variables
   #+begin_src emacs-lisp
   (defcustom arg-dotfiles-folder "~/dotfiles"
     "The folder where dotfiles exist. It is configured to be managed by GNU Stow."
     :type 'string
     :group 'dotfiles)

   (defcustom arg-dotfiles-config-files-directory "emacs/dot-emacs.d/"
     "The directory path inside `arg/dotfiles-folder' where emacs config files are stored."
     :type 'string
     :group 'dotfiles)
   #+end_src
** Custom Functions
   #+begin_src emacs-lisp
   #+end_src
** Emacs Init

*** Settings

    Sane Defaults
    #+begin_src emacs-lisp
    ;; menu shit remove
    (mapc
     (lambda (mode)
       (when (fboundp mode)
         (funcall mode -1)))
     ' (menu-bar-mode tool-bar-mode scroll-bar-mode))

    (unless (file-directory-p "~/dev")
      (make-directory "~/dev" t)
      (setq default-directory "~/dev"))

    ;; Init
    (setq inhibit-default-init t
          inhibit-startup-echo-area-message t
          inhibit-startup-screen t
          initial-scratch-message nil)

    ;; warn when opening files bigger than 100MB
    (setq large-file-warning-threshold 100000000)

    (defconst gas-savefile-dir (expand-file-name "savefile" user-emacs-directory))

    ;; Create the savefile dir if it doesn't exist
    (unless (file-exists-p gas-savefile-dir)
      (make-directory gas-savefile-dir))

    ;;; UI
    ;; No blink cursor
    (blink-cursor-mode -1)

    (setq use-dialog-box nil)

    ;; disable bell ring
    (setq ring-bell-function 'ignore)

    ;; nice scrolling
    (setq scroll-margin 0
          scroll-conservatively 100000
          scroll-preserve-screen-position 1)

    ;; mode line settings
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)

    ;; enable y/n answers
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; useful frame title
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
    		   (abbreviate-file-name (buffer-file-name))
    		 "%b"))))

    ;; org default mode
    (setq initial-major-mode 'org-mode)

    ;; make cursor tab length on tab
    (setq-default x-stretch-cursor t)

    ;; Keep emacs custom-settings in separate file
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))

    ;; Store all backup and autosave files in the tmp dir
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))

    ;; revert buffers automatically when file changed externally
    (global-auto-revert-mode t)

    ;; Make backups of files, even when they're in vcs
    (setq vc-make-backup-files t)

    ;; Fix empty pasteboard error
    (setq save-interprogram-paste-before-kill nil)

    ;; line highlight
    (hl-line-mode t)

    ;; enable recent files
    (recentf-mode t)
    #+end_src

    #+RESULTS:
    : t

**** Elisp Formatter
     #+begin_src emacs-lisp
     ;; (use-package elisp-format)
     #+end_src

     #+RESULTS:
     
*** Display

**** Declare all themes as safe

     To avoid being asked about setting a theme as safe, I set this
     If you need to load a new theme, you won't have to set it with
     =(load-theme 'theme-name :no-confirm)=. Built-in themes are
     safe by default.

     #+begin_src emacs-lisp
     (setq custom-safe-themes t)
     #+end_src

     #+RESULTS:
     : t

**** Install Doom Themes
     This will install doom-themes from MELPA for use. To set the theme
     change it in the =(load-theme 'doom-theme-name t)= line.

     #+begin_src emacs-lisp
     ;; Install doom-themes
     (use-package doom-themes
       :custom
       (doom-themes-enable-bold t)
       (doom-themes-enable-italic t)
       :config
       (doom-themes-visual-bell-config)
       (doom-themes-org-config))
     #+end_src

**** Load the Theme                                                   :theme:

     #+begin_src emacs-lisp
     (load-theme 'modus-vivendi-tinted t)
     #+end_src

     #+RESULTS:
     : t

**** Load Doom Modeline

     Doom Modeline is a modeline for the bottom of the Emacs window

     #+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ;; Height
  (doom-modeline-height 25)
  
  ;; Width
  (doom-modeline-bar-width 4)
  (doom-modeline-window-width-limit 85)
  
  ;; Icons
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  
  ;; Text style
  (doom-modeline-unicode-fallback nil)
  (doom-modeline-minor-modes nil)
  
  ;; Buffer info
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-buffer-encoding nil)
  
  ;; LSP/Eglot
  (doom-modeline-lsp t)
  (doom-modeline-check-simple-format t)
  
  ;; Git
  (doom-modeline-vcs-max-length 12)
  
  ;; Environment
  (doom-modeline-env-version t)
  (doom-modeline-env-python-executable "python3")
  
  ;; Performance
  (doom-modeline-enable-word-count nil)
  (doom-modeline-indent-info nil))

;; Ensure nerd-icons are installed
(use-package nerd-icons)
     #+end_src

     #+RESULTS:

**** Zoom (golden-ratio)

     Package that handles automatic window sizing based on active window

     #+begin_src emacs-lisp
     (use-package zoom
       :init
       (zoom-mode t)
       :config
       (custom-set-variables
        '(zoom-size '(0.618 . 0.618))))
     #+end_src

     #+RESULTS:
     : t

**** Posframe
     #+begin_src emacs-lisp
(use-package posframe
  :config
  ;; Global posframe settings
  
  ;; Default position handler for all posframes
  (setq posframe-mouse-banish t)  ; Move mouse away from posframe
  
  ;; Default parameters for all posframes
  (setq-default posframe-arghandler
                (lambda (buffer-or-name key value)
                  (or (and (eq key :internal-border-width) 10)
                      (and (eq key :internal-border-color) "#51afef")
                      (and (eq key :background-color) "#282c34")
                      value)))
  
  ;; Posframe border style
  (setq posframe-border-width 2))
     #+end_src

     #+RESULTS:
     : t

*** Completion

**** Vertico
     #+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil))

(use-package vertico-posframe
  :after vertico
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-poshandler #'posframe-poshandler-frame-center)
  (setq vertico-posframe-border-width 2)
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8))))
     #+end_src

     #+RESULTS:
     : t

**** Marginalia
     #+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
     #+end_src

     #+RESULTS:
     : t

**** Orderless
     #+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
     #+end_src

     #+RESULTS:

**** Consult
     #+begin_src emacs-lisp
(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-y" . consult-yank-pop)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s r" . consult-ripgrep)
         ("M-s f" . consult-find)
         ("C-x r b" . consult-bookmark))
  :config
  (setq consult-narrow-key "<"))
     #+end_src

     #+RESULTS:
     : consult-bookmark

**** Corfu
     #+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode)
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.0)
  (corfu-quit-at-boundary 'separator)
  (corfu-echo-documentation 0.25)
  (corfu-preview-current 'insert)
  (corfu-preselect 'prompt)
  (corfu-popupinfo-delay '(0.5 . 0.2)))
     #+end_src

     #+RESULTS:
     : t

**** Cape
     #+begin_src emacs-lisp
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))
     #+end_src

     #+RESULTS:

*** Keybindings

**** which-key
     #+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
     #+end_src

     #+RESULTS:
     : t

*** Org Mode

    #+begin_src emacs-lisp
(use-package org
  :custom
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-startup-indented t)
  :config
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org")))

(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star 'replace))
    #+end_src

    #+RESULTS:
    : t

*** File Management

**** Dired
     #+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-alh --group-directories-first")
  (dired-dwim-target t))

(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("TAB" . dired-subtree-toggle)))
     #+end_src

     #+RESULTS:
     : dired-subtree-toggle

*** Git

**** Magit
     #+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch))
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
     #+end_src

     #+RESULTS:
     : magit-dispatch

**** Forge
     Set up ~/.authinfo.gpg or ~/.authinfo with:
     ~machine gitlab.com/api/v4 login YOUR_USERNAME^forge password YOUR_TOKEN~
     #+begin_src emacs-lisp
     (use-package forge
       :after magit
       :config
       ;; Gitlab settings
       (setq forge-alist
             '(("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository)))

       ;; Set number of topics to fetch
       (setq forge-topic-list-limit '(60 . 10))  ; (issues . merge-requests)

       ;; Columns to show in topic list
       (setq forge-topic-list-columns
             '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
               ("Title" 60 t nil title nil)
               ("State" 6 t nil state nil)
               ("Updated" 10 t nil updated nil)))

       ;; Auto-fetch notifications
       (setq forge-pull-notifications t)

       ;; Database location
       (setq forge-database-file (expand-file-name "forge-database.sqlite" user-emacs-directory)))
      #+end_src
**** git-messenger
    #+begin_src emacs-lisp
    (use-package git-messenger
      :bind ("C-x v p" . git-messenger:popup-message)
      :config
      (setq git-messenger:show-detail t
    	git-messenger:use-magit-popup t))
    #+end_src
**** diff-hl
    #+begin_src emacs-lisp
    (use-package diff-hl
      :config
      (global-diff-hl-mode)
      (diff-hl-flydiff-mode))
    #+end_src
**** blamer
     #+begin_src emacs-lisp
(use-package blamer
  :bind (("s-i" . blamer-show-commit-info)
         ("C-c i" . blamer-show-posframe-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 140
                    :italic t)))
  :config
  (global-blamer-mode 1))
       
     #+end_src

     #+RESULTS:
     : blamer-show-posframe-commit-info

** Programming
   
*** eglot
    #+begin_src emacs-lisp
(use-package eglot
  :hook ((python-mode . eglot-ensure)
	 (yaml-mode . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs
               '(yaml-mode . ("ansible-language-server" "--stdio")))
  (add-hook 'python-mode-hook
	    (lambda ()
              (add-hook 'before-save-hook 'eglot-format-buffer nil t)))
  (setq eglot-ignored-server-capabilities 
        '(:workspaceDidChangeConfiguration)))

(use-package sideline
  :hook (flymake-mode . sideline-mode)
  :config
  (setq sideline-flymake-display-mode 'line)
  (setq sideline-backends-right '(sideline-flymake)))

(use-package sideline-flymake
  :after (sideline flymake)
  :hook (flymake-mode . sideline-mode))

(use-package eldoc-box
  :config
  (defun arg/eldoc-box-scroll-up ()
    "Scroll up in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-down 3))))
  (defun arg/eldoc-box-scroll-down ()
    "Scroll down in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-up 3))))
  :bind
  (:map eglot-mode-map
        ("C-k" . arg/eldoc-box-scroll-up)
        ("C-j" . arg/eldoc-box-scroll-down)
        ("M-h" . eldoc-box-eglot-help-at-point)))
    #+end_src

    #+RESULTS:
    : eldoc-box-eglot-help-at-point

*** flycheck
    #+begin_src emacs-lisp
    ;; (use-package flycheck
    ;;   :config
    ;;   (add-hook 'after-init-hook #'global-flycheck-mode))

    ;; (use-package flycheck-eglot
    ;;   :after (flycheck eglot)
    ;;   :config
    ;;   (global-flycheck-eglot-mode 1))
    #+end_src

#+RESULTS:
: t

*** ansible
    #+begin_src emacs-lisp
;; Ansible Language Server
(use-package ansible
  :hook ((yaml-mode . ansible)
         (yaml-ts-mode . ansible)))

(use-package yaml-mode
  :mode (("\\.ya?ml\\'" . yaml-mode)
         ("\\.ansible\\'" . yaml-mode)))

(use-package ansible-doc
  :hook (yaml-mode . ansible-doc-mode)
  :bind (:map ansible-doc-mode-map
              ("C-c ?" . ansible-doc)))

(add-hook 'yaml-mode-hook
      (lambda ()
        (define-key yaml-mode-map (kbd "RET") 'newline-and-indent)))
    #+end_src

#+RESULTS:
| #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (setq tab-width 2) (add-hook 'completion-at-point-functions (lambda (&rest _) (untabify (line-beginning-position) (line-end-position)) nil) 100 t)) nil] | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (setq tab-width 2) (add-hook 'post-self-insert-hook (lambda nil (when (eq (char-before) 9) (atomic-change-group (delete-char -1) (insert (make-string tab-width 32))))) nil t)) nil] | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (add-hook 'before-save-hook (lambda nil (untabify (point-min) (point-max))) nil t)) nil] | yaml-set-imenu-generic-expression | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent)) nil] | ansible-doc-mode | ansible | eglot-ensure |


*** python
    #+begin_src emacs-lisp
    (use-package pyvenv
      :config
      (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))))
    #+end_src

    #+RESULTS:
    : t

*** devdocs
    #+begin_src emacs-lisp
    (use-package devdocs
      :bind (("C-h D" . devdocs-lookup)
             ("C-c d d" . devdocs-lookup))
      :config
      ;; Install docs for your languages
      (add-hook 'python-mode-hook
                (lambda () (setq-local devdocs-current-docs '("python~3.13"))))
      (add-hook 'yaml-mode-hook
                (lambda () (setq-local devdocs-current-docs '("ansible~2.11"))))
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (setq-local devdocs-current-docs '("elisp")))))
    #+end_src

#+RESULTS:
: devdocs-lookup

** Projects

   Using =projectile= for project management

   #+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '("~/projects/"))
  (setq projectile-completion-system 'default)
  (setq projectile-enable-caching t))

(use-package consult-projectile
  :after (consult projectile)
  :bind (("C-c p f" . consult-projectile-find-file)
         ("C-c p p" . consult-projectile-switch-project)))
   #+end_src

#+RESULTS:
: consult-projectile-switch-projects

** Shell and Terminal
   Install vterm for terminal support
   #+begin_src emacs-lisp
   (use-package vterm
     :defer t
     :bind (("C-c o t" . vterm-other-window)))
   #+end_src

#+RESULTS:
: vterm-other-window

** Snippets
   #+begin_src emacs-lisp
   (use-package tempel
     :defer t
     :bind (("M-+" . tempel-complete)
   	 ("M-*" . tempel-insert))
     :init
     (defun tempel-setup-capf ()
       (setq-local completion-at-point-functions
   		(cons #'tempel-expand
   		      completion-at-point-functions)))

     (add-hook 'conf-mode-hook 'tempel-setup-capf)
     (add-hook 'prog-mode-hook 'tempel-setup-capf)
     (add-hook 'text-mode-hook 'tempel-setup-capf))

   (use-package tempel-collection)
   #+end_src

** Embark
    #+begin_src emacs-lisp
    (use-package embark
        :bind (("C-." . embark-act)
               ("M-." . embark-dwim)
               ("C-h B" . embark-bindings))
        :config
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator))
        (setq embark-prompter 'embark-completing-read-prompter))

    ;; Embark + Consult integration
    (use-package embark-consult
      :after (embark consult)
      :hook (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src

#+RESULTS:
| consult-preview-at-point-mode |
