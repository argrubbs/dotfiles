#+TITLE: ARG Emacs
#+AUTHOR: Adam Grubbs
:PROPERTIES:
<<<<<<< HEAD
#+PROPERTY: header-args :tangle config.el
#+STARTUP: contents
#+RESULTS: silent
:END:

* Emacs Configuration
=======
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: overview
:END:
* Configuration
  :PROPERTIES:
  :VISIBILITY: children
  :END:
** straight.el
   #+begin_src emacs-lisp
   ;; Configure straight.el to use use-package by default
   (setq straight-use-package-by-default t)
   (straight-use-package 'use-package)
   #+end_src
** My Info 
   #+begin_src emacs-lisp
   (setq user-full-name "Adam Grubbs"
         user-main-address "argrubbs@users.noreply.github.com")
   #+end_src
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

** Base Settings

*** Set initial mode to Org
#+begin_src emacs-lisp
  (setq initial-major-mode 'org-mode)
#+end_src

<<<<<<< HEAD
** UI

*** Theme
=======
   (defcustom arg-dotfiles-config-files-directory "emacs/dot-emacs.d/"
     "The directory path inside `arg/dotfiles-folder' where emacs config files are stored."
     :type 'string
     :group 'dotfiles)
   #+end_src
** Custom Functions
   #+begin_src emacs-lisp
   #+end_src
** Emacs Init

*** Settings

    Sane Defaults
    #+begin_src emacs-lisp
    ;; menu shit remove
    (mapc
     (lambda (mode)
       (when (fboundp mode)
         (funcall mode -1)))
     ' (menu-bar-mode tool-bar-mode scroll-bar-mode))

    (unless (file-directory-p "~/dev")
      (make-directory "~/dev" t)
      (setq default-directory "~/dev"))

    ;; Init
    (setq inhibit-default-init t
          inhibit-startup-echo-area-message t
          inhibit-startup-screen t
          initial-scratch-message nil)

    ;; warn when opening files bigger than 100MB
    (setq large-file-warning-threshold 100000000)

    (defconst gas-savefile-dir (expand-file-name "savefile" user-emacs-directory))

    ;; Create the savefile dir if it doesn't exist
    (unless (file-exists-p gas-savefile-dir)
      (make-directory gas-savefile-dir))

    ;;; UI
    ;; No blink cursor
    (blink-cursor-mode -1)

    (setq use-dialog-box nil)

    ;; disable bell ring
    (setq ring-bell-function 'ignore)

    ;; nice scrolling
    (setq scroll-margin 0
          scroll-conservatively 100000
          scroll-preserve-screen-position 1)

    ;; mode line settings
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t)

    ;; enable y/n answers
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; useful frame title
    (setq frame-title-format
          '((:eval (if (buffer-file-name)
    		   (abbreviate-file-name (buffer-file-name))
    		 "%b"))))

    ;; org default mode
    (setq initial-major-mode 'org-mode)

    ;; make cursor tab length on tab
    (setq-default x-stretch-cursor t)

    ;; Keep emacs custom-settings in separate file
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file))

    ;; Store all backup and autosave files in the tmp dir
    (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))

    ;; revert buffers automatically when file changed externally
    (global-auto-revert-mode t)

    ;; Make backups of files, even when they're in vcs
    (setq vc-make-backup-files t)

    ;; Fix empty pasteboard error
    (setq save-interprogram-paste-before-kill nil)

    ;; line highlight
    (hl-line-mode t)

    ;; enable recent files
    (recentf-mode t)
    #+end_src

    #+RESULTS:
    : t

**** Elisp Formatter
     #+begin_src emacs-lisp
     ;; (use-package elisp-format)
     #+end_src

     #+RESULTS:
     
*** Display
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

**** Declare all themes as safe

     To avoid being asked about setting a theme as safe, I set this
     If you need to load a new theme, you won't have to set it with
     =(load-theme 'theme-name :no-confirm)=. Built-in themes are
     safe by default.

     #+begin_src emacs-lisp
     (setq custom-safe-themes t)
     #+end_src


<<<<<<< HEAD
**** Install Themes
Install various themes
#+begin_src emacs-lisp
  (use-package doom-themes)
  (straight-use-package '(moe-theme :host github
  				  :repo "kuanyui/moe-theme.el"
  				  :branch "dev"))
  (use-package ef-themes
    :init
    (ef-themes-take-over-modus-themes-mode 1)
    :config
    (setq modus-themes-mixed-fonts t)
    (setq modus-themes-italic-constructs t))
#+end_src

#+RESULTS:
: t

**** Load my theme
#+begin_src emacs-lisp
  (load-theme 'moe-dark t)
#+end_src

*** Fonts

    #+begin_src emacs-lisp
    (when (member "Iosevka Nerd Font Mono" (font-family-list))
      (set-face-attribute 'default nil :family "Iosevka Nerd Font" :height 200 :weight 'semi-light)
      (set-face-attribute 'fixed-pitch nil :family "Iosevka Nerd Font Mono" :height 200))

    (when (member "Caveat" (font-family-list))
      (set-face-attribute 'font-lock-comment-face nil :font "Futura-20"))

    (when (member "Iosevka Nerd Font" (font-family-list))
      (set-face-attribute 'variable-pitch nil :family "American Typewriter" :height 220))

    ;; Resize Org headings
    (dolist (face '((org-level-1 . 1.35)
                    (org-level-2 . 1.3)
                    (org-level-3 . 1.2)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Nerd Font" :weight 'bold :height (cdr face)))

    ;; Make the document title a bit bigger
    (set-face-attribute 'org-document-title nil :font "Iosevka Nerd Font" :weight
    		    'bold :height 1.8)

    (require 'org-indent)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))

    (set-face-attribute 'org-block nil            :foreground nil :inherit
    		    'fixed-pitch :height 0.85)
    (set-face-attribute 'org-code nil             :inherit '(shadow fixed-pitch) :height 0.85)
    (set-face-attribute 'org-indent nil           :inherit '(org-hide fixed-pitch) :height 0.85)
    (set-face-attribute 'org-verbatim nil         :inherit '(shadow fixed-pitch) :height 0.85)
    (set-face-attribute 'org-special-keyword nil  :inherit '(font-lock-comment-face
    							 fixed-pitch))
    (set-face-attribute 'org-meta-line nil        :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil         :inherit 'fixed-pitch)

    (add-hook 'org-mode-hook 'variable-pitch-mode)

    #+End_Src

    #+RESULTS:
    | variable-pitch-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


*** Nerd Icons

    #+begin_src emacs-lisp
    (use-package nerd-icons
      :straight t)
    #+end_src

*** Modeline

*** Extras

**** Zoom

Package that handles automatic window sizing based on active window
=======
**** Install Doom Themes
     This will install doom-themes from MELPA for use. To set the theme
     change it in the =(load-theme 'doom-theme-name t)= line.

     #+begin_src emacs-lisp
     ;; Install doom-themes
     (use-package doom-themes
       :custom
       (doom-themes-enable-bold t)
       (doom-themes-enable-italic t)
       :config
       (doom-themes-visual-bell-config)
       (doom-themes-org-config))
     #+end_src

**** Load the Theme                                                   :theme:

     #+begin_src emacs-lisp
     (load-theme 'modus-vivendi-tinted t)
     #+end_src

     #+RESULTS:
     : t

**** Load Doom Modeline

     Doom Modeline is a modeline for the bottom of the Emacs window

     #+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  ;; Height
  (doom-modeline-height 25)
  
  ;; Width
  (doom-modeline-bar-width 4)
  (doom-modeline-window-width-limit 85)
  
  ;; Icons
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  
  ;; Text style
  (doom-modeline-unicode-fallback nil)
  (doom-modeline-minor-modes nil)
  
  ;; Buffer info
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-buffer-encoding nil)
  
  ;; LSP/Eglot
  (doom-modeline-lsp t)
  (doom-modeline-check-simple-format t)
  
  ;; Git
  (doom-modeline-vcs-max-length 12)
  
  ;; Environment
  (doom-modeline-env-version t)
  (doom-modeline-env-python-executable "python3")
  
  ;; Performance
  (doom-modeline-enable-word-count nil)
  (doom-modeline-indent-info nil))

;; Ensure nerd-icons are installed
(use-package nerd-icons)
     #+end_src

     #+RESULTS:

**** Zoom (golden-ratio)

     Package that handles automatic window sizing based on active window
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

     #+begin_src emacs-lisp
     (use-package zoom
       :init
       (zoom-mode t)
       :config
       (custom-set-variables
        '(zoom-size '(0.618 . 0.618))))
     #+end_src

<<<<<<< HEAD
**** Posframe

     #+begin_src emacs-lisp
(use-package posframe
  :straight t
=======
     #+RESULTS:
     : t

**** Posframe
     #+begin_src emacs-lisp
(use-package posframe
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
  :config
  ;; Global posframe settings
  
  ;; Default position handler for all posframes
  (setq posframe-mouse-banish t)  ; Move mouse away from posframe
  
  ;; Default parameters for all posframes
  (setq-default posframe-arghandler
                (lambda (buffer-or-name key value)
                  (or (and (eq key :internal-border-width) 10)
                      (and (eq key :internal-border-color) "#51afef")
                      (and (eq key :background-color) "#282c34")
                      value)))
  
  ;; Posframe border style
<<<<<<< HEAD
  (setq posframe-border-width 2)
  
  ;; Hide posframe on specific events
  (add-hook 'posframe-hide-hook
            (lambda () (set-cursor-color "white"))))
     #+end_src

*** Editor settings tweaks
Need to enable line numbers, column numbers, and a size indicator
#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+end_src

Highlight line mode
#+begin_src emacs-lisp
  (hl-line-mode t)
#+end_src

Enable recent files mode
#+begin_src emacs-lisp
(recentf-mode t)
#+end_src

** Editing

*** expand-region
      #+begin_src emacs-lisp
      (use-package expand-region
	:straight t
	:bind (("C-=" . er/expand-region)))
      #+end_src

*** save-place-move
     #+begin_src emacs-lisp
     (save-place-mode 1)
     #+end_src

*** beacon
     #+begin_src emacs-lisp
     (use-package beacon
       :straight t
       :init
       (beacon-mode 1))
     #+end_src

   These packages ars focused on providing a better experience for completion
   in the minibuffer, editor, and anywhere else
=======
  (setq posframe-border-width 2))
     #+end_src

     #+RESULTS:
     : t

*** Completion

**** Vertico
     #+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil))

(use-package vertico-posframe
  :after vertico
  :config
  (vertico-posframe-mode 1)
  (setq vertico-posframe-poshandler #'posframe-poshandler-frame-center)
  (setq vertico-posframe-border-width 2)
  (setq vertico-posframe-parameters
        '((left-fringe . 8)
          (right-fringe . 8))))
     #+end_src

     #+RESULTS:
     : t

**** Marginalia
     #+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
     #+end_src

     #+RESULTS:
     : t

**** Orderless
     #+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
     #+end_src
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

     #+RESULTS:

**** Consult
     #+begin_src emacs-lisp
(use-package consult
  :bind (("C-x b" . consult-buffer)
         ("C-x 4 b" . consult-buffer-other-window)
         ("C-x 5 b" . consult-buffer-other-frame)
         ("M-y" . consult-yank-pop)
         ("M-g g" . consult-goto-line)
         ("M-g M-g" . consult-goto-line)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s r" . consult-ripgrep)
         ("M-s f" . consult-find)
         ("C-x r b" . consult-bookmark))
  :config
  (setq consult-narrow-key "<"))
     #+end_src

     #+RESULTS:
     : consult-bookmark

**** Corfu
     #+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode)
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 2)
  (corfu-auto-delay 0.0)
  (corfu-quit-at-boundary 'separator)
  (corfu-echo-documentation 0.25)
  (corfu-preview-current 'insert)
  (corfu-preselect 'prompt)
  (corfu-popupinfo-delay '(0.5 . 0.2)))
     #+end_src

     #+RESULTS:
     : t

**** Cape
     #+begin_src emacs-lisp
(use-package cape
  :init
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))
     #+end_src

     #+RESULTS:

*** Keybindings

**** which-key
     #+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))
     #+end_src

     #+RESULTS:
     : t

*** Org Mode

    #+begin_src emacs-lisp
(use-package org
  :custom
  (org-hide-emphasis-markers t)
  (org-pretty-entities t)
  (org-startup-indented t)
  :config
  (setq org-directory "~/org")
  (setq org-agenda-files '("~/org")))

(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star 'replace))
    #+end_src

    #+RESULTS:
    : t
<<<<<<< HEAD
** Completion
*** Vertico
=======

*** File Management
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

**** Dired
     #+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-alh --group-directories-first")
  (dired-dwim-target t))

(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("TAB" . dired-subtree-toggle)))
     #+end_src

     #+RESULTS:
     : dired-subtree-toggle

*** Git

**** Magit
     #+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch))
  :config
  (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
     #+end_src

     #+RESULTS:
     : magit-dispatch

**** Forge
     Set up ~/.authinfo.gpg or ~/.authinfo with:
     ~machine gitlab.com/api/v4 login YOUR_USERNAME^forge password YOUR_TOKEN~
     #+begin_src emacs-lisp
     (use-package forge
       :after magit
       :config
       ;; Gitlab settings
       (setq forge-alist
             '(("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository)))

       ;; Set number of topics to fetch
       (setq forge-topic-list-limit '(60 . 10))  ; (issues . merge-requests)

       ;; Columns to show in topic list
       (setq forge-topic-list-columns
             '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
               ("Title" 60 t nil title nil)
               ("State" 6 t nil state nil)
               ("Updated" 10 t nil updated nil)))

       ;; Auto-fetch notifications
       (setq forge-pull-notifications t)

<<<<<<< HEAD
    Marginalia provides extra info into the minibuffer completions. It's really just that.

    #+begin_src emacs-lisp
    (use-package marginalia
      :bind (:map minibuffer-local-map
    	      ("M-A" . marginalia-cycle))
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
      :config
      (nerd-icons-completion-mode))

    (use-package all-the-icons-completion
      :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
      :init
      (all-the-icons-completion-mode))
    #+end_src

    #+RESULTS:
    | all-the-icons-completion-marginalia-setup | nerd-icons-completion-marginalia-setup |

*** Consult

    Consult provides search and navigation commands based on the Emacs completion function [[help:completing-read][completing-read]]. Check out [[id:2F9DB448-1184-4DB2-8C21-B54023F292CC][Consult]] for more.

    #+begin_src emacs-lisp
    (use-package consult
      :bind (:map global-map
    	      ("M-g M-g" . consult-goto-line)
    	      ("M-s M-b" . consult-buffer)
    	      ("M-s M-f" . consult-find)
    	      ("M-s M-g" . consult-ripgrep)
    	      ("M-s M-h" . consult-history)
    	      ("M-s M-i" . consult-imenu)
    	      ("M-s M-l" . consult-line)
    	      ("M-s M-m" . consult-mark)
    	      ("M-s M-y" . consult-yank-pop)
    	      ("M-s M-s" . consult-outline)
    	      :map consult-narrow-map
    	      ("?" . consult-narrow-help))
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      (setq register-preview-delay 0.5
    	register-preview-function #'consult-register-format)
      (advice-add #'retister-preview :override #'consult-register-window)
      (setq xref-show-xrefs-function #'consult-xref
    	xref-show-definitions-function #'consult-xref)
      :config
      (setq consult-line-numbers-widen t)
      (setq consult-async-min-input 3)
      (setq consult-async-input-debounce 0.5)
      (setq consult-async-input-throttle 0.8)
      (setq consult-narrow-key nil)
      (setq consult-find-args
    	(concat "find . -not ( "
    		"-path */.git* -prune "
    		"-or -path */.cache* -prune )"))
      (setq consult-preview-key 'any)
      (add-to-list 'consult-mode-histories '(vc-git-log-edit-mode . log-edit-comment-ring))
      (require 'consult-imenu)


      (use-package consult-org-roam
        :bind (("M-s M-o f" . consult-org-roam-file-find)
    	   ("M-s M-o l" . consult-org-roam-forward-links)
    	   ("M-s M-o b" . consult-org-roam-backlinks)
    	   ("M-s M-o s" . consult-org-roam-search)
    	   ("M-s M-o l" . consult-org-roam-backlinks-recursive))
        :init
        (consult-org-roam-mode))

      (use-package consult-dir
        :straight t
        :bind (("C-x C-d" . consult-dir)
    	   :map minibuffer-local-completion-map
    	   ("C-x C-d" . consult-dir)
    	   ("C-x C-f" . consult-dir-jump-file))))
    #+end_src

    #+RESULTS:
    : consult-narrow-help
    
*** Corfu

    Corfu is an in-buffer completion framework that provides a completion popup.

    #+begin_src emacs-lisp
	    (use-package corfu
      :straight t
      :custom
      (corfu-auto t)
      (corfu-cycle t)
      (corfu-auto-delay 0)
      (corfu-auto-prefix 0)
      (corfu-popupinfo-delay '(0.5 . 0.2))
      (tab-always-indent 'complete)
      (completion-cycle-threshold nil)
      (corfu-echo-mode nil)
      (defun my-corfu-complete-all ()
        "Show all completions at point."
        (interactive)
        (let ((corfu-auto-prefix 0))
          (completion-at-point)))

      (global-set-key (kbd "M-/") #'my-corfu-complete-all)
      :bind
      (:map corfu-map
            ("M-p" . corfu-popupinfo-scroll-down)
            ("M-n" . corfu-popupinfo-scroll-up)
            ("M-d" . corfu-popupinfo-toggle))
      :init
      (global-corfu-mode)
      (corfu-popupinfo-mode 1)
      (corfu-history-mode 1))

    (use-package nerd-icons-corfu
      :straight t
      :after corfu
      :config
      (setq corfu-margin-formatters '(nerd-icons-corfu-formatter)))

    (use-package emacs
      :init
      (setq completion-cycle-threshold 3)
      (setq tab-always-indent 'complete))

    (use-package dabbrev
      :bind (("C-<tab>" . dabbrev-completion)
             ("C-M-<tab>" . dabbrev-expand))
      :config
      (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ") 
      (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
      (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode))
    #+end_src

    #+RESULTS:
    : dabbrev-expand

    Nerd icons in Corfu

    #+begin_src emacs-lisp
    (use-package nerd-icons-corfu
      :ensure
      :config
      (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
      (setq nerd-icons-corfu-mapping
    	'((array :style "cod" :icon "symbol_array" :face font-lock-type-face)
    	  (boolean :style "cod" :icon "symbol_boolean" :face font-lock-builtin-face)
    	  ;; ...
    	  (t :style "cod" :icon "code" :face font-lock-warning-face))))
    #+end_src

    #+RESULTS:

*** Cape

    Cape (Completion-at-Point Extensions) are providers for Corfu completion

    #+begin_src emacs-lisp
    (use-package cape
      :bind (("C-c p p" . completion-at-point)
    	 ("C-c p t" . complete-tag)
    	 ("C-c p d". cape-dabbrev)
    	 ("C-c p h" . cape-history)
    	 ("C-c p f" . cape-file)
    	 ("C-c p k" . cape-keyword)
    	 ("C-c p s" . cape-elisp-symbol)
    	 ("C-c p e" . cape-elisp-block)
    	 ("C-c p a" . cape-abbrev)
    	 ("C-c p l" . cape-line)
    	 ("C-c p w" . cape-dict)
    	 ("C-c p :" . cape-emoji)
    	 ("C-c p \\" . cape-tex)
    	 ("C-c p _" . cape-tex)
    	 ("C-c p ^". cape-tex)
    	 ("C-c p &" . cape-sgml)
    	 ("C-c p r" . cape-rfc1345))
      
      :init
      (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
      ;;(add-hook 'completion-at-point-functions #'cape-dabbrev t)
      (add-hook 'emacs-lisp-mode-hook
    	    (lambda ()
    	            (add-hook 'completion-at-point-functions #'cape-elisp-block nil t)
    		    (add-hook 'completion-at-point-functions #'cape-elisp-symbol nil t)))
      (add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'completion-at-point-functions #'cape-emoji nil t)
    	(add-hook 'completion-at-point-functions #'org-roam-complete-link-at-point nil t)))
        (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'completion-at-point-functions #'cape-file 90 t)))

    	      


      ;;(add-to-list 'completion-at-point-functions #'cape-history)
      ;;(add-hook 'completion-at-point-functions #'cape-keyword t)
      ;;(add-to-list 'completion-at-point-functions #'cape-tex)
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
      ;;(add-to-list 'completion-at-point-functions #'cape-dict)
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
      ;;(add-to-list 'completion-at-point-functions #'cape-line)
      )
    #+end_src

    #+RESULTS:
    : cape-rfc1345
    
*** Set exec-path from shell

    #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :straight t
      :init
      (exec-path-from-shell-initialize))
   #+end_src

   #+RESULTS:
   : ((MANPATH . :/usr/share/man:/usr/local/share/man:/Library/TeX/Distributions/.DefaultTeX/Contents/Man:) (PATH . /opt/homebrew/bin:/opt/homebrew/sbin:/Users/adamgrubbs/.npm-global/bin:/Users/adamgrubbs/.local/bin:/Users/adamgrubbs/.config/emacs/bin:/opt/homebrew/lib/node_modules:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/Library/TeX/texbin))

*** Embark
    #+begin_src emacs-lisp
    (use-package embark
        :straight t
        :bind (("C-." . embark-act)
               ("M-." . embark-dwim)
               ("C-h B" . embark-bindings))
        :config
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator))
        (setq embark-prompter 'embark-completing-read-prompter))

        ;; Embark + Consult integration (must-have)
    (use-package embark-consult
      :straight t
      :after (embark consult)
      :hook (embark-collect-mode . consult-preview-at-point-mode))


    #+end_src


** Navigation

*** avy
     #+begin_src emacs-lisp
            (use-package avy
            :straight t
            :bind (("C-;" . avy-goto-char-timer)
                   ("C-:" . avy-goto-line)
                   ("M-g w" . avy-goto-word-1)
                   ("M-g c" . avy-goto-char-2))
            :config
            (setq avy-background t)
            (setq avy-style 'at-full)
            (setq avy-timeout-seconds 0.5)
            (setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

            ;; avy-zap - Zap to char using avy
       (use-package avy-zap
         :straight t
         :bind (("M-z" . avy-zap-to-char-dwim)
                ("M-Z" . avy-zap-up-to-char-dwim)))

       ;; ace-window - Window switching with avy
       (use-package ace-window
         :straight t
         :bind (("C-x o" . ace-window))
         :config
         (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
         (setq aw-scope 'frame)
         (setq aw-dispatch-always t))

       ;; link-hint - Open links with avy
       (use-package link-hint
         :straight t
         :bind (("C-c l o" . link-hint-open-link)
                ("C-c l c" . link-hint-copy-link)))
     #+end_src

** Org

*** Settings
    Change the following variables:

    - =org-goto-auto-isearch= to allos for the use of n/p and f/b for org-goto =C-c C-j=
    - =org-M-RET-may-split-lines= to prevent adding headings with =M-RET= in the middle of the line
    - =org-yank-folded-subtrees= to allow for yanking (pasting) the contents of a killed (copy/cut) subtree
    - =org-return-follows-link= allows you to use the RET key to follow links (default is =C-c C-o=)

    #+begin_src emacs-lisp
    (setq org-goto-auto-isearch nil
          org-M-RET-may-split-lines nil
          org-return-follows-link t
          org-yank-olded-subtrees nil
          org-adapt-indentation t
          org-hide-leading-stars t
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-ellipsis "  ·"
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 0)

    (add-hook 'org-mode-hook 'visual-line-mode)

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; (use-package olivetti	       ;;
    ;;   :hook (org-mode . olivetti-mode)) ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    #+end_src

    #+RESULTS:
    | olivetti-mode | visual-line-mode | variable-pitch-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

*** Custom Org-Mode Functions

    Here are my custom org-mode functions. They will include docstrings so there isn't
    a great need for documentation here.

    #+begin_src emacs-lisp
    (defun arg-emacs-org-insert-drawer-correctly (arg)
      "Insert a drawer or PROPERTIES drawer with prefix ARG. Places the cursor into
    the new drawer."
      (interactive "P")
      (if arg
          (let ((start (point))
    	    (org-insert-property-drawer)
    	    ;; Find the beginning of the drawer at point or after
    	    (goto-char start)
    	    (when (re-search-forward ":PROPERTIES:" nil t)
    	      ;; Move to line after :PROPERTIES:
    	      (forward-line 1)))
    	(call-interactively 'org-insert-drawer))))

    (define-key org-mode-map (kbd "C-c i")
    	    'arg-emacs-org-insert-drawer-correctly)

    ;; Assign keybinds for moving between links
    (with-eval-after-load 'org
      (define-key org-mode-map (kbd "M-n") #'org-next-link)
      (define-key org-mode-map (kbd "M-p") #'prg-previous-link))
    #+end_src

    #+RESULTS:
    : prg-previous-link


*** Custom Org-Mode Keybinds :keybind:
    :PROPERTIES:
    :CUSTOM_ID: org_keys
    :END:

    #+begin_src emacs-lisp
    (global-set-key (kbd "<f7>")
    		'org-tags-view)
    (global-set-key (kbd "C-c a")
    		#'org-agenda)
    #+end_src

    #+RESULTS:
    : org-agenda


*** Org Modern

    Modern Org mode package

    #+begin_src emacs-lisp
    (use-package org-modern
      :config
      (setq
       org-auto-align-tags t
       org-tags-column 0
       org-fold-catch-invisible-edits 'show-and-error
       org-special-ctrl-a/e t
       org-insert-heading-respect-content t

       ;; Don't style the following
       org-modern-tag nil
       org-modern-priority nil
       org-modern-todo nil
       org-modern-table nil

       ;; Agenda styling
       org-agenda-tags-column 0
       org-agenda-block-separator ?─
       org-agenda-time-grid
       '((daily today require-timed)
         (800 1000 1200 1400 1600 1800 2000)
         " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
       org-agenda-current-time-string
       "⭠ now ─────────────────────────────────────────────────")

      (global-org-modern-mode))

    #+end_src

    #+RESULTS:

*** Org Superstar

    This package enables pretty bullets in org mode

    #+begin_src emacs-lisp
    (use-package org-superstar
        :straight t
          :custom
    ;; Use simple bullets that definitely exist in your font
    ;;(org-superstar-headline-bullets-list '("●" "○" "◆" "◇" "▶" "▷"))
    ;; Or use these if you want more variety
     (org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜"))
    (org-superstar-remove-leading-stars t)
    (org-superstar-leading-bullet ?\s))

    #+end_src

*** Org-Contrib

    Extra contrib packages to extend org mode

    #+begin_src emacs-lisp
    (use-package org-contrib
      :straight t)
    (require 'ox)
    #+end_src

*** Org-Roam
    Org-Roam is a note-taking system similar to zettelkasten.

**** Install and Config

     This installs and configures org-roam.
     =(setq org-roam-v2-ack t)= is in the config to avoid the
     warnings about migrating from v1.
     =(org-roam-direcory "~/RoamNotes")= sets the directory that
     stores the notes. Org-Roam will bulid a =sqlite= database
     for storing the metadata for the nodes (notes) and the links
     between them.

     The variable =arg-emacs-org-roam-dir= assigns a directory
     to be used for org-roam notes. There is logic to determine if
     this directory exists, and if it does not then it should
     create it.


     #+begin_src emacs-lisp
     (defvar arg-emacs-org-roam-dir "~/RoamNotes"
       "Variable for Org Roam notes location")

     (unless
         (file-directory-p arg-emacs-org-roam-dir)
       (make-directory arg-emacs-org-roam-dir))

     (use-package org-roam
       :straight t
       :init
       (setq org-roam-v2-ack t)
       :custom
       (org-roam-directory arg-emacs-org-roam-dir)
       (org-roam-completion-everywhere t)
       (org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
           :unnarrowed t)))
       :bind (("C-c n l" . org-roam-buffer-toggle)
       	 ("C-c n f" . org-roam-node-find)
       	 ("C-c n i" . org-roam-node-insert)
     	 :map org-mode-map
     	 ("C-M-i" . completion-at-point))
       :config
       (org-roam-setup))

     ;; Set database autosync
     (org-roam-db-autosync-enable)
     #+end_src

*** Org-Agenda
    Org Agenda file is set with ~C-c ]~ and removed with ~C-c [~
#+begin_src emacs-lisp
(setq org-agenda-files '("~/org/agenda"))
#+end_src

*** Org Attach                                                   :org_attach:
    :PROPERTIES:

    :END:
    Org Attachments are useful for adding files to org files.

    Set org attach directory
    #+begin_src emacs-lisp
    (defvar arg-org-data-dir (expand-file-name "~/org/data")
      "Variable for setting the data directory for org attach")
    (unless (file-directory-p arg-org-data-dir)
      (make-directory arg-org-data-dir t))
    (if (file-directory-p arg-org-data-dir)
        (setq org-attach-id-dir arg-org-data-dir)) 
    #+end_src

    #+RESULTS:
    : ~/org/data

    Defining some custom functions for org attach
    #+begin_src emacs-lisp
    ;; COPY and attach files to org headers using dired
    (add-hook 'dired-mode-hook
    	  (lambda ()
    	    (define-key dired-mode-map (kbd "C-c C-x c")
    			(lambda ()
    			  (interactive)
    			  (let ((org-attach-method 'cp))
    			    (call-interactively #'org-attach-dired-to-subtree))))))
    ;; MOVE and attach files to org headers using dired
    (add-hook 'dired-mode-hook
    	  (lambda ()
    	    (define-key dired-mode-map (kbd "C-c C-x m")
    			(lambda ()
    			  (interactive)
    			  (let ((org-attach-method 'mv))
    			    (call-interactively #'org-attach-dired-to-subtree))))))
    #+end_src

** Version Control
   
*** Magit
    #+begin_src emacs-lisp
    (use-package magit
      :straight t
      :bind (("C-x g" . magit-status)
    	 ("C-x M-g" . magit-dispatch)
    	 ("C-c M-g" . magit-file-dispatch))
      :config
      (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    #+end_src

*** Git Support Packages
**** git-gutter
    #+begin_src emacs-lisp
        (use-package git-gutter
          :straight t
          :config
          (global-git-gutter-mode 1))
 #+end_src
**** git-timemachine
    #+begin_src emacs-lisp
        (use-package git-timemachine
          :straight t
          :bind (("C-x v t" . git-timemachine)))
 #+end_src
**** forge
     Forge  Setup for GitLab:
     1. Create token at https://gitlab.com/-/profile/personal_access_tokens
     2. Scopes: =api=, =read_user=, =read_repository=
     3. Add to =~/.authinfo.gpg= or =~/.authinfo=
	~machine gitlab.com/api/v4 login YOUR_USERNAME^forge password YOUR_TOKEN~
	 #+begin_src emacs-lisp
	 (use-package forge
	   :straight t
	   :after magit
	   :config
	   ;; Gitlab settings
	   (setq forge-alist
		 '(("gitlab.com" "gitlab.com/api/v4" "gitlab.com" forge-gitlab-repository)))

	   ;; Set number of topics to fetch
	   (setq forge-topic-list-limit '(60 . 10))  ; (issues . merge-requests)

	   ;; Columns to show in topic list
	   (setq forge-topic-list-columns
		 '(("#" 5 forge-topic-list-sort-by-number (:right-align t) number nil)
		   ("Title" 60 t nil title nil)
		   ("State" 6 t nil state nil)
		   ("Updated" 10 t nil updated nil)))

	   ;; Auto-fetch notifications
	   (setq forge-pull-notifications t)

	   ;; Database location
	   (setq forge-database-file (expand-file-name "forge-database.sqlite" user-emacs-directory)))
=======
       ;; Database location
       (setq forge-database-file (expand-file-name "forge-database.sqlite" user-emacs-directory)))
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
      #+end_src
**** git-messenger
    #+begin_src emacs-lisp
    (use-package git-messenger
<<<<<<< HEAD
      :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
      :bind ("C-x v p" . git-messenger:popup-message)
      :config
      (setq git-messenger:show-detail t
    	git-messenger:use-magit-popup t))
    #+end_src
**** diff-hl
    #+begin_src emacs-lisp
<<<<<<< HEAD
        (use-package diff-hl
          :straight t
          :config
          (global-diff-hl-mode)
          (diff-hl-flydiff-mode))


=======
    (use-package diff-hl
      :config
      (global-diff-hl-mode)
      (diff-hl-flydiff-mode))
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
    #+end_src
**** blamer
     #+begin_src emacs-lisp
(use-package blamer
<<<<<<< HEAD
  :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
  :bind (("s-i" . blamer-show-commit-info)
         ("C-c i" . blamer-show-posframe-commit-info))
  :defer 20
  :custom
  (blamer-idle-time 0.3)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                    :background nil
                    :height 140
                    :italic t)))
  :config
  (global-blamer-mode 1))
       
     #+end_src

     #+RESULTS:
     : blamer-show-posframe-commit-info

** Programming
   
*** eglot
    #+begin_src emacs-lisp
<<<<<<< HEAD
          (use-package eglot
            :straight t
            :hook ((python-mode . eglot-ensure)
          	 (yaml-mode . eglot-ensure))
            :config
            (add-to-list 'eglot-server-programs
                         '(python-mode . ("pyright-langserver" "--stdio")))
            (add-to-list 'eglot-server-programs
                         '(yaml-mode . ("ansible-language-server" "--stdio")))
            (add-hook 'python-mode-hook
          	    (lambda ()
                        (add-hook 'before-save-hook 'eglot-format-buffer nil t)))
              (setq eglot-ignored-server-capabilities 
              '(:workspaceDidChangeConfiguration)))

    (use-package sideline
      :straight t
      :hook (flymake-mode . sideline-mode)
      :config
      (setq sideline-flymake-display-mode 'line)
      (setq sideline-backends-right '(sideline-flymake)))

    (use-package sideline-flymake
      :straight t
      :after (sideline flymake)
      :hook (flymake-mode . sideline-mode))

          (use-package eldoc-box
            :straight t
            :config
            (defun arg/eldoc-box-scroll-up ()
              "Scroll up in `eldoc-box--frame'"
              (interactive)
              (with-current-buffer eldoc-box--buffer
                (with-selected-frame eldoc-box--frame
                  (scroll-down 3))))
            (defun arg/eldoc-box-scroll-down ()
              "Scroll down in `eldoc-box--frame'"
              (interactive)
              (with-current-buffer eldoc-box--buffer
                (with-selected-frame eldoc-box--frame
                  (scroll-up 3))))
            :bind
            (:map eglot-mode-map
                  ("C-k" . arg/eldoc-box-scroll-up)
                  ("C-j" . arg/eldoc-box-scroll-down)
                  ("M-h" . eldoc-box-eglot-help-at-point)))
=======
(use-package eglot
  :hook ((python-mode . eglot-ensure)
	 (yaml-mode . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs
               '(python-mode . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs
               '(yaml-mode . ("ansible-language-server" "--stdio")))
  (add-hook 'python-mode-hook
	    (lambda ()
              (add-hook 'before-save-hook 'eglot-format-buffer nil t)))
  (setq eglot-ignored-server-capabilities 
        '(:workspaceDidChangeConfiguration)))

(use-package sideline
  :hook (flymake-mode . sideline-mode)
  :config
  (setq sideline-flymake-display-mode 'line)
  (setq sideline-backends-right '(sideline-flymake)))

(use-package sideline-flymake
  :after (sideline flymake)
  :hook (flymake-mode . sideline-mode))

(use-package eldoc-box
  :config
  (defun arg/eldoc-box-scroll-up ()
    "Scroll up in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-down 3))))
  (defun arg/eldoc-box-scroll-down ()
    "Scroll down in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-up 3))))
  :bind
  (:map eglot-mode-map
        ("C-k" . arg/eldoc-box-scroll-up)
        ("C-j" . arg/eldoc-box-scroll-down)
        ("M-h" . eldoc-box-eglot-help-at-point)))
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
    #+end_src

    #+RESULTS:
    : eldoc-box-eglot-help-at-point

*** flycheck
    #+begin_src emacs-lisp
    ;; (use-package flycheck
<<<<<<< HEAD
    ;; :straight t
    ;; :config
    ;; (add-hook 'after-init-hook #'global-flycheck-mode))

    ;; (use-package flycheck-eglot
    ;;   :straight t
=======
    ;;   :config
    ;;   (add-hook 'after-init-hook #'global-flycheck-mode))

    ;; (use-package flycheck-eglot
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
    ;;   :after (flycheck eglot)
    ;;   :config
    ;;   (global-flycheck-eglot-mode 1))
    #+end_src

#+RESULTS:
: t

*** ansible
    #+begin_src emacs-lisp
<<<<<<< HEAD
          ;; Ansible Language Server
      (use-package ansible
        :straight t
        :hook ((yaml-mode . ansible)
               (yaml-ts-mode . ansible)))

      (use-package yaml-mode
        :straight t
        :mode (("\\.ya?ml\\'" . yaml-mode)
               ("\\.ansible\\'" . yaml-mode)))

     (use-package ansible-doc
    :straight t
    :hook (yaml-mode . ansible-doc-mode)
    :bind (:map ansible-doc-mode-map
                ("C-c ?" . ansible-doc)))
=======
;; Ansible Language Server
(use-package ansible
  :hook ((yaml-mode . ansible)
         (yaml-ts-mode . ansible)))

(use-package yaml-mode
  :mode (("\\.ya?ml\\'" . yaml-mode)
         ("\\.ansible\\'" . yaml-mode)))

(use-package ansible-doc
  :hook (yaml-mode . ansible-doc-mode)
  :bind (:map ansible-doc-mode-map
              ("C-c ?" . ansible-doc)))
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)

(add-hook 'yaml-mode-hook
      (lambda ()
        (define-key yaml-mode-map (kbd "RET") 'newline-and-indent)))
    #+end_src

#+RESULTS:
| #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (setq tab-width 2) (add-hook 'completion-at-point-functions (lambda (&rest _) (untabify (line-beginning-position) (line-end-position)) nil) 100 t)) nil] | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (setq tab-width 2) (add-hook 'post-self-insert-hook (lambda nil (when (eq (char-before) 9) (atomic-change-group (delete-char -1) (insert (make-string tab-width 32))))) nil t)) nil] | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent) (setq indent-tabs-mode nil) (add-hook 'before-save-hook (lambda nil (untabify (point-min) (point-max))) nil t)) nil] | yaml-set-imenu-generic-expression | #[nil ((define-key yaml-mode-map (kbd RET) 'newline-and-indent)) nil] | ansible-doc-mode | ansible | eglot-ensure |


*** python
    #+begin_src emacs-lisp
    (use-package pyvenv
<<<<<<< HEAD
      :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
      :config
      (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] "))))
    #+end_src

    #+RESULTS:
    : t

*** devdocs
    #+begin_src emacs-lisp
    (use-package devdocs
<<<<<<< HEAD
    :straight t
    :bind (("C-h D" . devdocs-lookup)
           ("C-c d d" . devdocs-lookup))
    :config
    ;; Install docs for your languages
    (add-hook 'python-mode-hook
              (lambda () (setq-local devdocs-current-docs '("python~3.13"))))
    (add-hook 'yaml-mode-hook
              (lambda () (setq-local devdocs-current-docs '("ansible~2.11"))))
    (add-hook 'emacs-lisp-mode-hook
              (lambda () (setq-local devdocs-current-docs '("elisp")))))
=======
      :bind (("C-h D" . devdocs-lookup)
             ("C-c d d" . devdocs-lookup))
      :config
      ;; Install docs for your languages
      (add-hook 'python-mode-hook
                (lambda () (setq-local devdocs-current-docs '("python~3.13"))))
      (add-hook 'yaml-mode-hook
                (lambda () (setq-local devdocs-current-docs '("ansible~2.11"))))
      (add-hook 'emacs-lisp-mode-hook
                (lambda () (setq-local devdocs-current-docs '("elisp")))))
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
    #+end_src

#+RESULTS:
: devdocs-lookup

** Projects

   Using =projectile= for project management

   #+begin_src emacs-lisp
(use-package projectile
<<<<<<< HEAD
  :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  :config
  (setq projectile-project-search-path '("~/projects/"))
  (setq projectile-completion-system 'default)
  (setq projectile-enable-caching t))

(use-package consult-projectile
<<<<<<< HEAD
  :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
  :after (consult projectile)
  :bind (("C-c p f" . consult-projectile-find-file)
         ("C-c p p" . consult-projectile-switch-project)))
   #+end_src
** Shell and Terminal
   Install vterm for terminal support
   #+begin_src emacs-lisp
   (use-package vterm
<<<<<<< HEAD
     :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
     :defer t
     :bind (("C-c o t" . vterm-other-window)))
   #+end_src
** Snippets
   #+begin_src emacs-lisp
   (use-package tempel
<<<<<<< HEAD
     :straight t
=======
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
     :defer t
     :bind (("M-+" . tempel-complete)
   	 ("M-*" . tempel-insert))
     :init
     (defun tempel-setup-capf ()
       (setq-local completion-at-point-functions
   		(cons #'tempel-expand
   		      completion-at-point-functions)))

     (add-hook 'conf-mode-hook 'tempel-setup-capf)
     (add-hook 'prog-mode-hook 'tempel-setup-capf)
     (add-hook 'text-mode-hook 'tempel-setup-capf))

<<<<<<< HEAD
   (use-package tempel-collection
     :straight t)
   #+end_src

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:
=======
   (use-package tempel-collection)
   #+end_src

** Embark
    #+begin_src emacs-lisp
    (use-package embark
        :bind (("C-." . embark-act)
               ("M-." . embark-dwim)
               ("C-h B" . embark-bindings))
        :config
        (setq embark-indicators
              '(embark-minimal-indicator
                embark-highlight-indicator
                embark-isearch-highlight-indicator))
        (setq embark-prompter 'embark-completing-read-prompter))

    ;; Embark + Consult integration
    (use-package embark-consult
      :after (embark consult)
      :hook (embark-collect-mode . consult-preview-at-point-mode))
    #+end_src

#+RESULTS:
| consult-preview-at-point-mode |
>>>>>>> 7cda92d (Switched to straight.el, lots of changes)
